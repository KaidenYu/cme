--- main.cc	2019-08-29 18:02:31.415291103 +0800
+++ main_rr_fb.cc	2019-08-29 18:24:21.944919574 +0800
@@ -65,6 +65,27 @@
 
 #include "utils.h"
 
+///////kaiden//////start
+#include <stdio.h>
+#include <stdlib.h>
+#include <fcntl.h>
+#include <sys/stat.h>
+#include <errno.h>
+#include <linux/fb.h>
+#include <sys/ioctl.h>
+
+#include <sys/mman.h>
+#define FB0 "/dev/fb0"
+
+int fd = 0;
+char *fd_map = NULL;
+// 固定参数
+struct fb_fix_screeninfo fix_info;
+// 可变参数
+struct fb_var_screeninfo var_info;
+int ret = -1;
+int screen_size = 0;
+///////kaiden//////end
 
 using namespace std;
 using namespace cv;
@@ -147,6 +168,24 @@
  *
  * @return none
  */
+FILE *pfile;
+void openfile(const char* path)
+{
+    pfile = fopen(path,"r");
+    if(pfile == NULL)
+    {
+        printf("Open failure\n");
+        return;
+    }
+
+}
+
+int readfile(unsigned char* buffer)
+{
+    int read_bytes_num = fread( buffer, 1, 512*256*3, pfile );
+    return read_bytes_num;
+     
+}
 void readFrame(const char *fileName) {
     static int loop = 3;
     VideoCapture video;
@@ -155,18 +194,41 @@
 
     while (loop>0) {
         loop--;
+#if 0
         if (!video.open(videoFile)) {
             cout<<"Fail to open specified video file:" << videoFile << endl;
             exit(-1);
         }
+#else
+        openfile(fileName);
+#endif
 
         while (true) {
             usleep(20000);
+
+#if 0
             Mat img;
+#else
+            Mat img(256,512,CV_8UC3);
+#endif
+
+
             if (queueInput.size() < 30) {
+#if 0
                 if (!video.read(img) ) {
                     break;
                 }
+#else
+                int ret = readfile(img.data);
+                if(ret<=0)
+                {
+                    cout << "Finish reading raw image!" << endl;
+                    bReading = false;
+                    fclose(pfile);
+                    break;
+	
+                }
+#endif
 
                 mtxQueueInput.lock();
                 queueInput.push(make_pair(idxInputImage++, img));
@@ -175,8 +237,10 @@
                 usleep(10);
             }
         }
-
+#if 0
         video.release();
+#endif
+        
     }
 
     exit(0);
@@ -189,7 +253,7 @@
  * @return none
  *
  */
-void displayFrame() {
+void displayFrame(DPUTask *task) {
     Mat frame;
 
     while (true) {
@@ -207,13 +271,37 @@
                    << (float)queueShow.top().first / (dura / 1000000.f);
             string a = buffer.str() + " FPS";
             cv::putText(frame, a, cv::Point(10, 15), 1, 1, cv::Scalar{240, 240, 240},1);
+
+#if 0
             cv::imshow("ADAS Detection@Xilinx DPU", frame);
+#else
+            DPUTensor *conv_in_tensor = dpuGetInputTensor(task, INPUT_NODE);
+    	    int inHeight = dpuGetTensorHeight(conv_in_tensor);
+    	    int inWidth = dpuGetTensorWidth(conv_in_tensor);
+            int offset_x = (var_info.xres-inWidth)/2;
+            int offset_y = (var_info.yres-inHeight)/2;
+            unsigned char* ptr = frame.data;
+            for(unsigned int i = 0; i < inHeight; i++)
+            {
+	        
+                for(int j = 0; j < inWidth; j++)
+                {
+                    unsigned char b_tmp = (*(ptr+j*3+i*inWidth*3+0))>>3;
+                    unsigned char g_tmp = (*(ptr+j*3+i*inWidth*3+1))>>2;
+                    unsigned char r_tmp = (*(ptr+j*3+i*inWidth*3+2))>>3;
+                    unsigned short bgr=(r_tmp<<11)+(g_tmp<<5)+b_tmp;
+
+                    *((unsigned short *)(fd_map + (j+offset_x)*2 + (i+offset_y) * var_info.xres * 2 )) = bgr;
+            	}
+            }
+#endif
 
             idxShowImage++;
             queueShow.pop();
             mtxQueueShow.unlock();
             if (waitKey(1) == 'q') {
                 bReading = false;
+                munmap(fd_map, screen_size); //kaiden
                 exit(0);
             }
         } else {
@@ -337,6 +425,100 @@
     }
 }
 
+
+int frame_buffer_initial()
+{
+	/////////////////////////////////kaiden//////////////////////////////////////start
+    memset(&fix_info, 0, sizeof(struct fb_fix_screeninfo));
+    memset(&var_info, 0, sizeof(struct fb_var_screeninfo));
+    
+    fd = open(FB0, O_RDWR);
+    if(fd < 0)
+    {
+        char *error_msg = strerror(errno);
+        printf("Open %s failed, errno:%d, error message:%s\n", 
+            FB0, errno, error_msg);
+        return -1;
+    }
+
+    // get varied info
+    ret = ioctl(fd, FBIOGET_VSCREENINFO, &var_info);
+    if(ret < 0)
+    {
+        char *error_msg = strerror(errno);
+        printf("Get %s var info error, errno:%d, error message:%s\n", 
+            FB0, errno, error_msg);
+        return ret;
+    }
+
+    // get fix info
+    ret = ioctl(fd, FBIOGET_FSCREENINFO, &fix_info);
+    if(ret < 0)
+    {
+        char *error_msg = strerror(errno);
+        printf("Get %s fix info error, errno:%d, error message:%s\n", 
+            FB0, errno, error_msg);
+        return ret;
+    }
+
+    printf("%s var info, xres=%d, yres=%d\n", FB0, var_info.xres, var_info.yres);
+    printf("%s var info, xres_virtual=%d, yres_virtual=%d\n", 
+        FB0, var_info.xres_virtual, var_info.yres_virtual);
+    printf("%s var info, bits_per_pixel=%d\n", FB0, var_info.bits_per_pixel);
+    printf("%s var info, xoffset=%d, yoffset=%d\n", 
+        FB0, var_info.xoffset, var_info.yoffset);
+    printf("r_len=%d,r_off=%d,g_len=%d,g_off=%d,b_len=%d,b_off=%d"
+    	,var_info.red.length
+    	,var_info.red.offset
+    	,var_info.green.length
+    	,var_info.green.offset
+		,var_info.blue.length
+    	,var_info.blue.offset);
+
+#if 0 // try to modify RGB565 to RGB888 but failed
+    var_info.bits_per_pixel = 24;
+	ret = ioctl(fd, FBIOPUT_VSCREENINFO, &var_info);
+	if (ret)
+		printf("Error\n");
+	else
+		printf("Bits per pixel set\n");
+	
+
+	printf("%s var info, xres=%d, yres=%d\n", FB0, var_info.xres, var_info.yres);
+    printf("%s var info, xres_virtual=%d, yres_virtual=%d\n", 
+        FB0, var_info.xres_virtual, var_info.yres_virtual);
+    printf("%s var info, bits_per_pixel=%d\n", FB0, var_info.bits_per_pixel);
+    printf("%s var info, xoffset=%d, yoffset=%d\n", 
+        FB0, var_info.xoffset, var_info.yoffset);
+    printf("r_len=%d,r_off=%d,g_len=%d,g_off=%d,b_len=%d,b_off=%d"
+    	,var_info.red.length
+    	,var_info.red.offset
+    	,var_info.green.length
+    	,var_info.green.offset
+		,var_info.blue.length
+    	,var_info.blue.offset);
+#endif
+
+    screen_size = var_info.xres * var_info.yres * var_info.bits_per_pixel / 8;
+
+    // mmap frame buffer to user space
+    fd_map = (char *)mmap(NULL, screen_size, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);
+    if(fd_map == (char *)-1)
+    {
+        char *error_msg = strerror(errno);
+        printf("Mmap %s failed, errno:%d, error message:%s\n", 
+            FB0, errno, error_msg);
+        return -1;
+    }
+
+    //munmap(fd_map, screen_size);
+    //close(fd);
+/////////////////////////////////kaiden//////////////////////////////////////end
+}
+
+
+
+
 /**
  * @brief Entry for running YOLO-v3 neural network for ADAS object detection
  *
@@ -347,6 +529,8 @@
         return -1;
     }
 
+    frame_buffer_initial(); //kaiden
+
     /* Attach to DPU driver and prepare for running */
     dpuOpen();
 
@@ -365,7 +549,7 @@
     */
     array<thread, 6> threadsList = {
     thread(readFrame, argv[1]),
-    thread(displayFrame),
+    thread(displayFrame, task[0]),
     thread(runYOLO, task[0]),
     thread(runYOLO, task[1]),
     thread(runYOLO, task[2]),
@@ -386,6 +570,8 @@
     /* Dettach from DPU driver & free resources */
     dpuClose();
 
+    munmap(fd_map, screen_size); //kaiden
+
     return 0;
 }
 
